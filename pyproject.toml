[build-system]
requires = [
    "scikit-build-core>=0.11.5",
    "pybind11>=3.0.0",
    # Add numpy to build requirements for headers
    "numpy>=2.0.2",
]
build-backend = "scikit_build_core.build"

[project]
name = "mmgpy"
version = "0.1.3.dev0"
description = "Python bindings for the MMG software"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "meshio>=5.3.5",
    "numpy>=2.0.2",
    "patchelf>=0.17.2.4; sys_platform == 'linux'",
]
authors = [{ name = "Kevin MArchais", email = "kevinmarchais@gmail.com" }]
license = { text = "GPL" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[tool.scikit-build]
# Build configuration
build.verbose = true
cmake.version = ">=3.15"
cmake.args = ["-DCMAKE_BUILD_TYPE=Release"]
cmake.define = { BUILD_TESTING = "OFF", BUILD_SHARED_LIBS = "ON", MMGPY_SKIP_EXECUTABLES = "OFF" }

build-dir = "build"

# Wheel configuration
wheel.packages = ["src/mmgpy"]

# Source distribution
sdist.include = ["CMakeLists.txt", "src/*", "extern/*"]
sdist.exclude = ["vtk*/**", "vtk*.tar.gz", "*.mesh", "*.sol", "*.vtk"]

# Scripts entry points for development installs
[project.scripts]
mmg2d_O3 = "mmgpy:_run_mmg2d"
mmg3d_O3 = "mmgpy:_run_mmg3d"
mmgs_O3 = "mmgpy:_run_mmgs"
fix-mmg-rpath = "mmgpy:_fix_rpath"

[dependency-groups]
dev = ["pre-commit>=4.0.1", "pytest>=8.3.4", "pyvista>=0.45.3"]

[tool.ruff.lint]
select = ["ALL"]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101",   # asserts allowed in tests
    "T201",   # print statements allowed in tests for debugging
    "SLF001", # accessing private members allowed in tests
    "BLE001", # broad exception catching allowed in tests
]
"src/mmgpy/__init__.py" = [
    "S603",   # subprocess calls with absolute paths to system tools are safe
    "T201",   # print statements used for debugging MMG executable issues
    "S110",   # try-except-pass is acceptable for non-critical RPATH fixing
    "BLE001", # broad exception catching is acceptable for non-critical RPATH fixing
    "E402",   # imports inside functions are intentional for lazy loading
    "C901",   # complex functions are acceptable for RPATH fixing logic
    "RUF005", # list concatenation is fine here for subprocess args
    "PTH207", # glob usage is fine for file discovery
]

[tool.cibuildwheel]
build-frontend = "build[uv]"
# Build for Python 3.9-3.13 on all platforms
build = "cp39-* cp310-* cp311-* cp312-* cp313-*"

# Skip 32-bit builds, PyPy, and Python versions without system installs on macOS
skip = "pp* *-win32 *-manylinux_i686 *-musllinux_i686 *-musllinux*"

# Test the built wheels
test-command = [
    'python -c "import os, sys, site; sp = site.getsitepackages()[0]; print(\"Site-packages:\", sp); print(\"Contents:\", os.listdir(sp) if os.path.exists(sp) else \"Not found\"); libs_dir = os.path.join(sp, \"mmgpy.libs\"); print(\"mmgpy.libs exists:\", os.path.exists(libs_dir)); print(\"mmgpy.libs contents:\", os.listdir(libs_dir) if os.path.exists(libs_dir) else \"Not found\")"',
    'python -c "import mmgpy"',
]

# Build verbosity
build-verbosity = 1

[[tool.cibuildwheel.overrides]]
select = "*-macosx_x86_64"
environment = { MACOSX_DEPLOYMENT_TARGET = "13.0" }

[[tool.cibuildwheel.overrides]]
select = "*-macosx_arm64"
environment = { MACOSX_DEPLOYMENT_TARGET = "14.0" }

# Override to force VTK path for macOS builds
[[tool.cibuildwheel.overrides]]
select = "*-macosx*"
environment = { "VTK_VERSION" = "9.4.1", "VTK_DIR" = "/tmp/vtk/cmake/vtk-9.4", "CMAKE_PREFIX_PATH" = "/tmp/vtk:/tmp", "CMAKE_IGNORE_PATH" = "/opt/homebrew:/opt/homebrew/lib:/opt/homebrew/include:/usr/local:/usr/local/lib:/usr/local/include" }
before-build = [
  'echo "=== FINAL VTK ENVIRONMENT CHECK ==="',
  'echo "VTK_DIR: $VTK_DIR"',
  'echo "CMAKE_PREFIX_PATH: $CMAKE_PREFIX_PATH"', 
  'echo "CMAKE_IGNORE_PATH: $CMAKE_IGNORE_PATH"',
  'echo "PATH: $PATH"',
  'ls -la /tmp/vtk/cmake/vtk-9.4/vtk-config.cmake',
  'echo "Contents of VTK config:"',
  'head -10 /tmp/vtk/cmake/vtk-9.4/vtk-config.cmake',
  'echo "=== END VTK ENVIRONMENT CHECK ==="',
]

[tool.cibuildwheel.linux]
archs = ["x86_64"] #, "aarch64"]
before-all = [
    # Download and extract pre-built VTK
    'VTK_VERSION="9.4.1"',
    'RELEASE_TAG="VTK-${VTK_VERSION}-shared"',
    'VTK_FILE="vtk-manylinux2014_x86_64.tar.gz"',
    'VTK_URL="https://github.com/sanguinariojoe/vtk-builds/releases/download/${RELEASE_TAG}/${VTK_FILE}"',
    'echo "Downloading VTK from ${VTK_URL}"',
    'curl -L -o vtk.tar.gz "${VTK_URL}"',
    'mkdir -p /tmp/vtk',
    'tar -xzf vtk.tar.gz -C /tmp/vtk --strip-components=1',
    'echo "VTK extraction completed. Checking structure:"',
    'ls -la /tmp/vtk/ | head -10',
    'echo "Checking possible VTK_DIR locations:"',
    'ls -la /tmp/vtk/cmake/ 2>/dev/null && echo "Found cmake in root" || echo "No cmake in root"',
    'ls -la /tmp/vtk/lib64/cmake/ 2>/dev/null && echo "Found lib64/cmake" || echo "No lib64/cmake"',
    'ls -la /tmp/vtk/cmake/vtk-9.4/ 2>/dev/null && echo "Found cmake/vtk-9.4" || echo "No cmake/vtk-9.4"',
    'ls -la /tmp/vtk/lib64/cmake/vtk-9.4/ 2>/dev/null && echo "Found lib64/cmake/vtk-9.4" || echo "No lib64/cmake/vtk-9.4"',
    'echo "Current environment:"',
    'echo "VTK_VERSION=${VTK_VERSION}"',
    'echo "Setting VTK_DIR for CMake:"',
    'export VTK_DIR="/tmp/vtk/cmake/vtk-9.4"',
    'echo "VTK_DIR=${VTK_DIR}"',
    'test -f "${VTK_DIR}/vtk-config.cmake" && echo "vtk-config.cmake found" || echo "vtk-config.cmake NOT FOUND"',
    'echo "Reorganizing VTK files to match CMake target expectations:"',
    'mkdir -p /tmp/lib64 /tmp/bin /tmp/include',
    'cp /tmp/vtk/lib*.so* /tmp/lib64/ 2>/dev/null || echo "No .so files found"',
    'cp /tmp/vtk/bin/* /tmp/bin/ 2>/dev/null || echo "No executables found"',
    'cp -r /tmp/vtk/include/* /tmp/include/ 2>/dev/null || echo "No include files found"',
    'echo "Linux file reorganization completed"',
]
# Point CMake to the extracted VTK installation
environment = { VTK_VERSION = "9.4.1", VTK_DIR = "/tmp/vtk/cmake/vtk-9.4" }
repair-wheel-command = "auditwheel show {wheel} && auditwheel repair -w {dest_dir} {wheel} || cp {wheel} {dest_dir}/"

[tool.cibuildwheel.macos]
archs = ["auto"]
before-all = [
    # Download and extract pre-built VTK
    'VTK_VERSION="9.4.1"',
    'VTK_ARCH=$(uname -m)',
    'RELEASE_TAG="VTK-${VTK_VERSION}-shared"',
    'VTK_FILE="vtk-macOS-${VTK_ARCH}.tar.gz"',
    'VTK_URL="https://github.com/sanguinariojoe/vtk-builds/releases/download/${RELEASE_TAG}/${VTK_FILE}"',
    'echo "Downloading VTK from ${VTK_URL}"',
    'curl -L -o vtk.tar.gz "${VTK_URL}"',
    'mkdir -p /tmp/vtk',
    'tar -xzf vtk.tar.gz -C /tmp/vtk --strip-components=1',
    'echo "VTK extraction completed. Original structure:"',
    'ls -la /tmp/vtk/ | head -10',
    'echo "=== FIXING VTK PREBUILT STRUCTURE ==="',
    'echo "Creating proper lib directory structure:"',
    'mkdir -p /tmp/vtk/lib',
    'echo "Moving all dylib files to lib directory:"',
    'mv /tmp/vtk/lib*.dylib /tmp/vtk/lib/ 2>/dev/null || echo "No loose .dylib files to move"',
    'echo "Fixing library symlinks for version mismatch (9.4.1 vs 9.4.9.4):"',
    'cd /tmp/vtk/lib',
    'for lib in *.dylib; do if [[ "$lib" == *"-9.4.9.4.dylib" ]]; then base=$(echo "$lib" | sed "s/-9.4.9.4.dylib//g"); echo "Creating symlink: ${base}-9.4.1.dylib -> ${base}-9.4.9.4.dylib"; ln -sf "${base}-9.4.9.4.dylib" "${base}-9.4.1.dylib"; fi; done',
    'cd /tmp/vtk',
    'echo "Creating include directory structure:"',
    'mkdir -p /tmp/vtk/include/vtk-9.4',
    'if [ -d "/tmp/vtk/vtk-9.4" ]; then echo "Moving headers from vtk-9.4/ to include/vtk-9.4/"; cp -r /tmp/vtk/vtk-9.4/* /tmp/vtk/include/vtk-9.4/; else echo "ERROR: No vtk-9.4 directory found for headers"; fi',
    'echo "Creating symlinks at expected VTK paths:"',
    'ln -sf /tmp/vtk/lib /tmp/lib || echo "lib symlink already exists"',
    'mkdir -p /tmp/vtk/bin',
    'ln -sf /tmp/vtk/bin /tmp/bin || echo "bin symlink already exists"',
    'ln -sf /tmp/vtk/include /tmp/include || echo "include symlink already exists"', 
    'echo "Creating dummy VTK executables (not needed for mmgpy):"',
    'touch /tmp/vtk/bin/vtkWrapHierarchy-9.4 /tmp/vtk/bin/vtkWrapPython-9.4 /tmp/vtk/bin/vtkWrapPythonInit-9.4 /tmp/vtk/bin/vtkParseJava-9.4 /tmp/vtk/bin/vtkWrapJava-9.4 /tmp/vtk/bin/vtkWrapSerDes-9.4 /tmp/vtk/bin/vtkProbeOpenGLVersion-9.4',
    'chmod +x /tmp/vtk/bin/vtk*',
    'echo "Created dummy VTK executables and symlinks"',
    'echo "Final VTK structure verification:"',
    'echo "Libraries in /tmp/vtk/lib:"',
    'ls -la /tmp/vtk/lib/ | head -10',
    'echo "Headers in /tmp/vtk/include/vtk-9.4:"',
    'ls -la /tmp/vtk/include/vtk-9.4/ | head -5',
    'echo "CMake config files:"',
    'ls -la /tmp/vtk/cmake/vtk-9.4/vtk-config.cmake',
    'echo "VTK prebuilt structure fix completed"',
]
# Point CMake to the extracted VTK installation and ignore Homebrew
environment = { "VTK_VERSION" = "9.4.1", "VTK_DIR" = "/tmp/vtk/cmake/vtk-9.4", "CMAKE_PREFIX_PATH" = "/tmp/vtk:/tmp", "CMAKE_IGNORE_PATH" = "/opt/homebrew:/opt/homebrew/lib:/opt/homebrew/include:/usr/local:/usr/local/lib:/usr/local/include" }
repair-wheel-command = "cp {wheel} {dest_dir}/"

[tool.cibuildwheel.windows]
archs = ["AMD64"]
before-all = [
    # Download and extract pre-built VTK, then reorganize to match expected paths
    "powershell -Command \"$VTK_VERSION = $env:VTK_VERSION; $RELEASE_TAG = 'VTK-' + $VTK_VERSION + '-shared'; $VTK_FILE = 'vtk-Windows-x86_64.tar.gz'; $VTK_URL = 'https://github.com/sanguinariojoe/vtk-builds/releases/download/' + $RELEASE_TAG + '/' + $VTK_FILE; Write-Host ('Downloading VTK from ' + $VTK_URL); Invoke-WebRequest -Uri $VTK_URL -OutFile vtk.tar.gz; New-Item -Path 'C:/vtk' -ItemType Directory -Force; tar -xzf vtk.tar.gz -C C:/vtk --strip-components=1\"",
    "powershell -Command \"New-Item -Path 'C:/lib' -ItemType Directory -Force; New-Item -Path 'C:/bin' -ItemType Directory -Force; New-Item -Path 'C:/include' -ItemType Directory -Force; Move-Item 'C:/vtk/*.lib' 'C:/lib/' -Force; Move-Item 'C:/vtk/*.dll' 'C:/bin/' -Force; Move-Item 'C:/vtk/*.exe' 'C:/bin/' -Force; Move-Item 'C:/vtk/vtk-9.4' 'C:/include/vtk-9.4' -Force\"",
]
# Point CMake to the extracted VTK installation
environment = { VTK_VERSION = "9.4.1", VTK_DIR = "C:/vtk/cmake/vtk-9.4" }
repair-wheel-command = [
    "echo --- Contents of wheel before repair ---",
    "python -m zipfile -l {wheel}",
    # Tell delvewheel to find DLLs in C:/bin where we moved them
    "uvx delvewheel repair -w {dest_dir} {wheel} --add-path C:/bin --ignore-in-wheel",
]
