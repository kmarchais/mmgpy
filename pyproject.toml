[build-system]
requires = [
    "scikit-build-core>=0.11.5",
    "pybind11>=3.0.0",
    # Add numpy to build requirements for headers
    "numpy>=2.0.2",
]
build-backend = "scikit_build_core.build"

[project]
name = "mmgpy"
version = "0.1.3.dev0"
description = "Python bindings for the MMG software"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "meshio>=5.3.5",
    "numpy>=2.0.2",
    "patchelf>=0.17.2.4; sys_platform == 'linux'",
]
authors = [{ name = "Kevin MArchais", email = "kevinmarchais@gmail.com" }]
license = { text = "GPL" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[tool.scikit-build]
# Build configuration
build.verbose = true
cmake.version = ">=3.15"
cmake.args = ["-DCMAKE_BUILD_TYPE=Release"]
cmake.define = { BUILD_TESTING = "OFF", BUILD_SHARED_LIBS = "ON", MMGPY_SKIP_EXECUTABLES = "OFF" }

build-dir = "build"

# Wheel configuration
wheel.packages = ["src/mmgpy"]

# Source distribution
sdist.include = ["CMakeLists.txt", "src/*", "extern/*"]
sdist.exclude = ["vtk*/**", "vtk*.tar.gz", "*.mesh", "*.sol", "*.vtk"]

# Scripts entry points for development installs
[project.scripts]
mmg2d_O3 = "mmgpy:_run_mmg2d"
mmg3d_O3 = "mmgpy:_run_mmg3d"
mmgs_O3 = "mmgpy:_run_mmgs"
fix-mmg-rpath = "mmgpy:_fix_rpath"

[dependency-groups]
dev = ["pre-commit>=4.0.1", "pytest>=8.3.4", "pyvista>=0.45.3"]

[tool.ruff.lint]
select = ["ALL"]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101",   # asserts allowed in tests
    "T201",   # print statements allowed in tests for debugging
    "SLF001", # accessing private members allowed in tests
    "BLE001", # broad exception catching allowed in tests
]
"src/mmgpy/__init__.py" = [
    "S603",   # subprocess calls with absolute paths to system tools are safe
    "T201",   # print statements used for debugging MMG executable issues
    "S110",   # try-except-pass is acceptable for non-critical RPATH fixing
    "BLE001", # broad exception catching is acceptable for non-critical RPATH fixing
    "E402",   # imports inside functions are intentional for lazy loading
    "C901",   # complex functions are acceptable for RPATH fixing logic
    "RUF005", # list concatenation is fine here for subprocess args
    "PTH207", # glob usage is fine for file discovery
]

[tool.cibuildwheel]
build-frontend = "build[uv]"
# Build for Python 3.9-3.13 on all platforms
build = "cp39-* cp310-* cp311-* cp312-* cp313-*"

# Skip 32-bit builds, PyPy, and Python versions without system installs on macOS
skip = "pp* *-win32 *-manylinux_i686 *-musllinux_i686 *-musllinux*"

# Test the built wheels
test-command = [
    'python -c "import os, sys; sp = os.path.join(sys.prefix, \"Lib\", \"site-packages\"); print(\"Site-packages:\", os.listdir(sp) if os.path.exists(sp) else \"Not found\"); libs_dir = os.path.join(sp, \"mmgpy.libs\"); print(\"mmgpy.libs exists:\", os.path.exists(libs_dir)); print(\"mmgpy.libs contents:\", os.listdir(libs_dir) if os.path.exists(libs_dir) else \"Not found\")"',
    'python -c "import mmgpy"',
]

# Build verbosity
build-verbosity = 1

[[tool.cibuildwheel.overrides]]
select = "*-macosx_x86_64"
environment = { MACOSX_DEPLOYMENT_TARGET = "13.0" }

[[tool.cibuildwheel.overrides]]
select = "*-macosx_arm64"
environment = { MACOSX_DEPLOYMENT_TARGET = "14.0" }

[tool.cibuildwheel.linux]
archs = ["x86_64"] #, "aarch64"]
before-all = [
    # Download and extract pre-built VTK using the new URL scheme
    'VTK_VERSION="9.4.1"',
    'RELEASE_TAG="VTK-${VTK_VERSION}-shared"',
    'VTK_FILE="vtk-manylinux2014_x86_64.tar.gz"',
    'VTK_URL="https://github.com/sanguinariojoe/vtk-builds/releases/download/${RELEASE_TAG}/${VTK_FILE}"',
    'echo "Downloading VTK from ${VTK_URL}"',
    'curl -L -o vtk.tar.gz "${VTK_URL}"',
    'mkdir -p /tmp/vtk',
    'tar -xzf vtk.tar.gz -C /tmp/vtk --strip-components=1',
]
# Point CMake to the extracted VTK installation
environment = { VTK_VERSION = "9.4.1", VTK_DIR = "/tmp/vtk/lib/cmake/vtk-9.4" }
repair-wheel-command = "auditwheel show {wheel} && auditwheel repair -w {dest_dir} {wheel} || cp {wheel} {dest_dir}/"

[tool.cibuildwheel.macos]
archs = ["auto"]
before-all = [
    # Download and extract pre-built VTK using the new URL scheme
    'VTK_VERSION="9.4.1"',
    'VTK_ARCH=$(uname -m)',
    'RELEASE_TAG="VTK-${VTK_VERSION}-shared"',
    'VTK_FILE="vtk-macOS-${VTK_ARCH}.tar.gz"',
    'VTK_URL="https://github.com/sanguinariojoe/vtk-builds/releases/download/${RELEASE_TAG}/${VTK_FILE}"',
    'echo "Downloading VTK from ${VTK_URL}"',
    'curl -L -o vtk.tar.gz "${VTK_URL}"',
    'mkdir -p /tmp/vtk',
    'tar -xzf vtk.tar.gz -C /tmp/vtk --strip-components=1',
]
# Point CMake to the extracted VTK installation
environment = { VTK_VERSION = "9.4.1", VTK_DIR = "/tmp/vtk/lib/cmake/vtk-9.4" }
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} --ignore-missing-dependencies || cp {wheel} {dest_dir}/"

[tool.cibuildwheel.windows]
archs = ["AMD64"]
before-all = [
    # Download and extract pre-built VTK, then reorganize to match expected paths
    "powershell -Command \"$VTK_VERSION = $env:VTK_VERSION; $RELEASE_TAG = 'VTK-' + $VTK_VERSION + '-shared'; $VTK_FILE = 'vtk-Windows-x86_64.tar.gz'; $VTK_URL = 'https://github.com/sanguinariojoe/vtk-builds/releases/download/' + $RELEASE_TAG + '/' + $VTK_FILE; Write-Host ('Downloading VTK from ' + $VTK_URL); Invoke-WebRequest -Uri $VTK_URL -OutFile vtk.tar.gz; New-Item -Path 'C:/vtk' -ItemType Directory -Force; tar -xzf vtk.tar.gz -C C:/vtk --strip-components=1\"",
    "powershell -Command \"New-Item -Path 'C:/lib' -ItemType Directory -Force; New-Item -Path 'C:/bin' -ItemType Directory -Force; Move-Item 'C:/vtk/*.lib' 'C:/lib/' -Force; Move-Item 'C:/vtk/*.dll' 'C:/bin/' -Force; Move-Item 'C:/vtk/*.exe' 'C:/bin/' -Force\"",
]
# Point CMake to the extracted VTK installation
environment = { VTK_VERSION = "9.4.1", VTK_DIR = "C:/vtk/cmake/vtk-9.4" }
repair-wheel-command = [
    "echo --- Contents of wheel before repair ---",
    "python -m zipfile -l {wheel}",
    # Tell delvewheel to find DLLs in C:/bin where we moved them
    "uvx delvewheel repair -w {dest_dir} {wheel} --add-path C:/bin --ignore-in-wheel",
]
