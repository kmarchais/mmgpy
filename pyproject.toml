[build-system]
requires = [
    "scikit-build-core>=0.11.5",
    "pybind11>=3.0.0",
    # Add numpy to build requirements for headers
    "numpy>=2.0.2",
]
build-backend = "scikit_build_core.build"

[project]
name = "mmgpy"
version = "0.1.5.dev0"
description = "Python bindings for the MMG software"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "meshio>=5.3.5",
    "numpy>=2.0.2",
    "patchelf>=0.17.2.4; sys_platform == 'linux'",
]
authors = [{ name = "Kevin MArchais", email = "kevinmarchais@gmail.com" }]
license = { text = "GPL" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[tool.scikit-build]
# Build configuration
build.verbose = true
cmake.version = ">=3.15"
cmake.args = ["-DCMAKE_BUILD_TYPE=Release"]
cmake.define = { BUILD_TESTING = "OFF", BUILD_SHARED_LIBS = "ON", MMGPY_SKIP_EXECUTABLES = "OFF" }

build-dir = "build"

# Wheel configuration
wheel.packages = ["src/mmgpy"]

# Source distribution
sdist.include = ["CMakeLists.txt", "src/*", "extern/*"]
sdist.exclude = ["vtk*/**", "vtk*.tar.gz", "*.mesh", "*.sol", "*.vtk"]

# Scripts entry points for development installs
[project.scripts]
mmg2d_O3 = "mmgpy:_run_mmg2d"
mmg3d_O3 = "mmgpy:_run_mmg3d"
mmgs_O3 = "mmgpy:_run_mmgs"
fix-mmg-rpath = "mmgpy:_fix_rpath"

[dependency-groups]
dev = ["pre-commit>=4.0.1", "pytest>=8.3.4", "pyvista>=0.45.3"]

[tool.ruff.lint]
select = ["ALL"]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101",   # asserts allowed in tests
    "T201",   # print statements allowed in tests for debugging
    "SLF001", # accessing private members allowed in tests
    "BLE001", # broad exception catching allowed in tests
]
"src/mmgpy/__init__.py" = [
    "S603",   # subprocess calls with absolute paths to system tools are safe
    "T201",   # print statements used for debugging MMG executable issues
    "S110",   # try-except-pass is acceptable for non-critical RPATH fixing
    "BLE001", # broad exception catching is acceptable for non-critical RPATH fixing
    "E402",   # imports inside functions are intentional for lazy loading
    "C901",   # complex functions are acceptable for RPATH fixing logic
    "RUF005", # list concatenation is fine here for subprocess args
    "PTH207", # glob usage is fine for file discovery
]

[tool.cibuildwheel]
build-frontend = "build[uv]"
build = "cp39-* cp310-* cp311-* cp312-* cp313-*"
skip = "pp* *-win32 *-manylinux_i686 *-musllinux_i686 *-musllinux*"
test-command = 'python -c "import mmgpy"'
build-verbosity = 1

[[tool.cibuildwheel.overrides]]
select = "*-macosx_x86_64"
environment = { MACOSX_DEPLOYMENT_TARGET = "10.15" }

[[tool.cibuildwheel.overrides]]
select = "*-macosx_arm64"
environment = { MACOSX_DEPLOYMENT_TARGET = "11.0" }

[[tool.cibuildwheel.overrides]]
select = "*-macosx*"
environment = { "VTK_VERSION" = "9.4.1", "VTK_DIR" = "/tmp/vtk/cmake/vtk-9.4", "CMAKE_PREFIX_PATH" = "/tmp/vtk:/tmp", "CMAKE_IGNORE_PATH" = "/opt/homebrew:/opt/homebrew/lib:/opt/homebrew/include:/usr/local:/usr/local/lib:/usr/local/include" }

[tool.cibuildwheel.linux]
archs = ["x86_64"]
before-all = [
    'VTK_VERSION="9.4.1"',
    'RELEASE_TAG="VTK-${VTK_VERSION}-shared"',
    'VTK_FILE="vtk-manylinux2014_x86_64.tar.gz"',
    'VTK_URL="https://github.com/sanguinariojoe/vtk-builds/releases/download/${RELEASE_TAG}/${VTK_FILE}"',
    'curl -L -o vtk.tar.gz "${VTK_URL}"',
    'mkdir -p /tmp/vtk',
    'tar -xzf vtk.tar.gz -C /tmp/vtk --strip-components=1',
    'mkdir -p /tmp/vtk/lib64',
    'mv /tmp/vtk/lib*.so* /tmp/vtk/lib64/ 2>/dev/null || echo "No loose .so files to move"',
    'cd /tmp/vtk/lib64',
    'for lib in *.so; do if [[ "$lib" == *"-9.4.9.4.so" ]]; then base=$(echo "$lib" | sed "s/-9.4.9.4.so//g"); ln -sf "${base}-9.4.9.4.so" "${base}-9.4.1.so"; ln -sf "${base}-9.4.9.4.so" "${base}-9.4.so"; fi; done',
    'cd /tmp/vtk',
    'mkdir -p /tmp/vtk/include/vtk-9.4',
    'if [ -d "/tmp/vtk/vtk-9.4" ]; then cp -r /tmp/vtk/vtk-9.4/* /tmp/vtk/include/vtk-9.4/; fi',
    'ln -sf /tmp/vtk/lib64 /tmp/lib64 || echo "lib64 symlink already exists"',
    'mkdir -p /tmp/vtk/bin',
    'ln -sf /tmp/vtk/bin /tmp/bin || echo "bin symlink already exists"',
    'ln -sf /tmp/vtk/include /tmp/include || echo "include symlink already exists"',
    'touch /tmp/vtk/bin/vtkWrapHierarchy-9.4 /tmp/vtk/bin/vtkWrapPython-9.4 /tmp/vtk/bin/vtkWrapPythonInit-9.4 /tmp/vtk/bin/vtkParseJava-9.4 /tmp/vtk/bin/vtkWrapJava-9.4 /tmp/vtk/bin/vtkWrapSerDes-9.4 /tmp/vtk/bin/vtkProbeOpenGLVersion-9.4',
    'chmod +x /tmp/vtk/bin/vtk*',
]
before-test = [
    "echo '=== Optimizing wheel size ===' && ls -la {project}/wheelhouse/ && find {project}/wheelhouse -name '*.whl' | while read wheel; do echo \"Processing $wheel\" && echo \"Original size: $(du -h \"$wheel\" | cut -f1)\" && python -c \"import tempfile, shutil, zipfile, os; temp_dir = tempfile.mkdtemp(); print('Extracting...'); zf = zipfile.ZipFile('$wheel'); zf.extractall(temp_dir); zf.close(); removed_dirs = 0; removed_files = 0; [(exec('global removed_dirs; removed_dirs += 1'), print(f'Removing include: {{os.path.join(root, d)}}'), shutil.rmtree(os.path.join(root, d), ignore_errors=True)) for root, dirs, files in os.walk(temp_dir) if 'include' in dirs for d in dirs if d == 'include']; [(exec('global removed_dirs; removed_dirs += 1'), print(f'Removing cmake: {{os.path.join(root, d)}}'), shutil.rmtree(os.path.join(root, d), ignore_errors=True)) for root, dirs, files in os.walk(temp_dir) if 'cmake' in dirs for d in dirs if d == 'cmake']; [(exec('global removed_files; removed_files += 1'), print(f'Removing binary: {{os.path.join(root, f)}}'), os.remove(os.path.join(root, f))) for root, dirs, files in os.walk(temp_dir) for f in files if f.startswith(('mmg2d_O3', 'mmg3d_O3', 'mmgs_O3')) and not f.endswith('.py')]; print(f'Removed {{removed_dirs}} directories, {{removed_files}} files'); shutil.make_archive('$wheel'.replace('.whl', ''), 'zip', temp_dir); shutil.move('$wheel'.replace('.whl', '.zip'), '$wheel'); shutil.rmtree(temp_dir)\" && echo \"Optimized size: $(du -h \"$wheel\" | cut -f1)\"; done"
]
environment = { "VTK_VERSION" = "9.4.1", "VTK_DIR" = "/tmp/vtk/cmake/vtk-9.4", "CMAKE_PREFIX_PATH" = "/tmp/vtk:/tmp", "CMAKE_IGNORE_PATH" = "/usr/lib:/usr/local/lib:/opt" }
repair-wheel-command = "cp {wheel} {dest_dir}/"

[tool.cibuildwheel.macos]
archs = ["auto"]
before-all = [
    'VTK_VERSION="9.4.1"',
    'VTK_ARCH=$(uname -m)',
    'RELEASE_TAG="VTK-${VTK_VERSION}-shared"',
    'VTK_FILE="vtk-macOS-${VTK_ARCH}.tar.gz"',
    'VTK_URL="https://github.com/sanguinariojoe/vtk-builds/releases/download/${RELEASE_TAG}/${VTK_FILE}"',
    'curl -L -o vtk.tar.gz "${VTK_URL}"',
    'mkdir -p /tmp/vtk',
    'tar -xzf vtk.tar.gz -C /tmp/vtk --strip-components=1',
    'mkdir -p /tmp/vtk/lib',
    'mv /tmp/vtk/lib*.dylib /tmp/vtk/lib/ 2>/dev/null || echo "No loose .dylib files to move"',
    'cd /tmp/vtk/lib',
    'for lib in *.dylib; do if [[ "$lib" == *"-9.4.9.4.dylib" ]]; then base=$(echo "$lib" | sed "s/-9.4.9.4.dylib//g"); ln -sf "${base}-9.4.9.4.dylib" "${base}-9.4.1.dylib"; ln -sf "${base}-9.4.9.4.dylib" "${base}-9.4.dylib"; fi; done',
    'cd /tmp/vtk',
    'mkdir -p /tmp/vtk/include/vtk-9.4',
    'if [ -d "/tmp/vtk/vtk-9.4" ]; then cp -r /tmp/vtk/vtk-9.4/* /tmp/vtk/include/vtk-9.4/; fi',
    'ln -sf /tmp/vtk/lib /tmp/lib || echo "lib symlink already exists"',
    'mkdir -p /tmp/vtk/bin',
    'ln -sf /tmp/vtk/bin /tmp/bin || echo "bin symlink already exists"',
    'ln -sf /tmp/vtk/include /tmp/include || echo "include symlink already exists"',
    'touch /tmp/vtk/bin/vtkWrapHierarchy-9.4 /tmp/vtk/bin/vtkWrapPython-9.4 /tmp/vtk/bin/vtkWrapPythonInit-9.4 /tmp/vtk/bin/vtkParseJava-9.4 /tmp/vtk/bin/vtkWrapJava-9.4 /tmp/vtk/bin/vtkWrapSerDes-9.4 /tmp/vtk/bin/vtkProbeOpenGLVersion-9.4',
    'chmod +x /tmp/vtk/bin/vtk*',
]
before-test = [
    "echo '=== Optimizing wheel size ===' && ls -la {project}/wheelhouse/ && find {project}/wheelhouse -name '*.whl' | while read wheel; do echo \"Processing $wheel\" && echo \"Original size: $(du -h \"$wheel\" | cut -f1)\" && python -c \"import tempfile, shutil, zipfile, os; temp_dir = tempfile.mkdtemp(); print('Extracting...'); zf = zipfile.ZipFile('$wheel'); zf.extractall(temp_dir); zf.close(); removed_dirs = 0; removed_files = 0; [(exec('global removed_dirs; removed_dirs += 1'), print(f'Removing include: {{os.path.join(root, d)}}'), shutil.rmtree(os.path.join(root, d), ignore_errors=True)) for root, dirs, files in os.walk(temp_dir) if 'include' in dirs for d in dirs if d == 'include']; [(exec('global removed_dirs; removed_dirs += 1'), print(f'Removing cmake: {{os.path.join(root, d)}}'), shutil.rmtree(os.path.join(root, d), ignore_errors=True)) for root, dirs, files in os.walk(temp_dir) if 'cmake' in dirs for d in dirs if d == 'cmake']; [(exec('global removed_files; removed_files += 1'), print(f'Removing binary: {{os.path.join(root, f)}}'), os.remove(os.path.join(root, f))) for root, dirs, files in os.walk(temp_dir) for f in files if f.startswith(('mmg2d_O3', 'mmg3d_O3', 'mmgs_O3')) and not f.endswith('.py')]; print(f'Removed {{removed_dirs}} directories, {{removed_files}} files'); shutil.make_archive('$wheel'.replace('.whl', ''), 'zip', temp_dir); shutil.move('$wheel'.replace('.whl', '.zip'), '$wheel'); shutil.rmtree(temp_dir)\" && echo \"Optimized size: $(du -h \"$wheel\" | cut -f1)\"; done"
]
environment = { "VTK_VERSION" = "9.4.1", "VTK_DIR" = "/tmp/vtk/cmake/vtk-9.4", "CMAKE_PREFIX_PATH" = "/tmp/vtk:/tmp", "CMAKE_IGNORE_PATH" = "/opt/homebrew:/opt/homebrew/lib:/opt/homebrew/include:/usr/local:/usr/local/lib:/usr/local/include", "MACOSX_DEPLOYMENT_TARGET" = "10.15" }
repair-wheel-command = "cp {wheel} {dest_dir}/"

[tool.cibuildwheel.windows]
archs = ["AMD64"]
before-all = [
    "powershell -Command \"$VTK_VERSION = $env:VTK_VERSION; $RELEASE_TAG = 'VTK-' + $VTK_VERSION + '-shared'; $VTK_FILE = 'vtk-Windows-x86_64.tar.gz'; $VTK_URL = 'https://github.com/sanguinariojoe/vtk-builds/releases/download/' + $RELEASE_TAG + '/' + $VTK_FILE; Invoke-WebRequest -Uri $VTK_URL -OutFile vtk.tar.gz; New-Item -Path 'C:/vtk' -ItemType Directory -Force; tar -xzf vtk.tar.gz -C C:/vtk --strip-components=1\"",
    "powershell -Command \"New-Item -Path 'C:/lib' -ItemType Directory -Force; New-Item -Path 'C:/bin' -ItemType Directory -Force; New-Item -Path 'C:/include' -ItemType Directory -Force; Move-Item 'C:/vtk/*.lib' 'C:/lib/' -Force; Move-Item 'C:/vtk/*.dll' 'C:/bin/' -Force; Move-Item 'C:/vtk/*.exe' 'C:/bin/' -Force; Move-Item 'C:/vtk/vtk-9.4' 'C:/include/vtk-9.4' -Force\"",
]
environment = { VTK_VERSION = "9.4.1", VTK_DIR = "C:/vtk/cmake/vtk-9.4" }
repair-wheel-command = [
    "powershell -Command \"Write-Host '=== Original wheel size ==='; $size = (Get-Item '{wheel}').Length / 1MB; Write-Host ('{0:F1} MB' -f $size)\"",
    "python -c \"import tempfile, shutil, zipfile, os; temp_dir = tempfile.mkdtemp(); print('Extracting wheel...'); zf = zipfile.ZipFile('{wheel}'); zf.extractall(temp_dir); zf.close(); removed_dirs = 0; removed_files = 0; [exec('global removed_dirs; removed_dirs += 1') or shutil.rmtree(os.path.join(root, d), ignore_errors=True) for root, dirs, files in os.walk(temp_dir) if 'include' in dirs for d in dirs if d == 'include']; [exec('global removed_dirs; removed_dirs += 1') or shutil.rmtree(os.path.join(root, d), ignore_errors=True) for root, dirs, files in os.walk(temp_dir) if 'cmake' in dirs for d in dirs if d == 'cmake']; [exec('global removed_files; removed_files += 1') or os.remove(os.path.join(root, f)) for root, dirs, files in os.walk(temp_dir) for f in files if f.startswith(('mmg2d_O3', 'mmg3d_O3', 'mmgs_O3')) and not f.endswith('.py')]; print(f'Removed {removed_dirs} dirs, {removed_files} files'); shutil.make_archive('{wheel}'.replace('.whl', ''), 'zip', temp_dir); shutil.move('{wheel}'.replace('.whl', '.zip'), '{wheel}'); shutil.rmtree(temp_dir)\"",
    "powershell -Command \"Write-Host '=== Optimized wheel size ==='; $size = (Get-Item '{wheel}').Length / 1MB; Write-Host ('{0:F1} MB' -f $size)\"",
    "uvx delvewheel repair -w {dest_dir} {wheel} --add-path C:/bin --ignore-in-wheel",
]
