name: Publish to PyPI

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches:
      - main

env:
  VTK_VERSION_MAJOR: 9
  VTK_VERSION_MINOR: 3
  VTK_VERSION_PATCH: 1

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] # Linux builds using cibuildwheel

    steps:
      - uses: actions/checkout@v4

      - name: Download pre-built VTK
        uses: suisei-cn/actions-download-file@v1.6.0
        with:
          url: https://github.com/sanguinariojoe/vtk-builds/releases/download/VTK-${{env.VTK_VERSION_MAJOR}}.${{env.VTK_VERSION_MINOR}}.${{env.VTK_VERSION_PATCH}}-static/vtk-manylinux2014_x86_64.tar.gz
          target: ${{github.workspace}}

      - name: Extract VTK
        run: |
          mkdir -p vtk
          tar -xzf vtk-manylinux2014_x86_64.tar.gz -C vtk
        shell: bash

      - uses: astral-sh/setup-uv@v4
        with:
          python-version: 3.12

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        env:
          CIBW_BUILD: cp312-manylinux_x86_64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ARCHS: x86_64
          CIBW_ENVIRONMENT: >
            PYTHON_EXECUTABLE="/opt/python/cp312-cp312/bin/python"
            CMAKE_PREFIX_PATH="/project/vtk/lib64/cmake/vtk-9.3"
            LD_LIBRARY_PATH="/project/vtk/lib64:$LD_LIBRARY_PATH"
            PYTHON_INCLUDE_DIR="/opt/python/cp312-cp312/include/python3.12"
            PYTHON_LIBRARY="/opt/python/cp312-cp312/lib/python3.12/config-3.12-x86_64-linux-gnu/libpython3.12.a"

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  # build_nonlinux:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [windows-latest, macos-latest, macos-13]
  #       python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: astral-sh/setup-uv@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     # VTK Installation steps
  #     - name: Set VTK filename
  #       id: vtk-file
  #       run: |
  #         if [ "$RUNNER_OS" == "Windows" ]; then
  #           echo "filename=vtk-Windows-x86_64.tar.gz" >> $GITHUB_OUTPUT
  #         elif [ "$RUNNER_OS" == "macOS" ]; then
  #           if [ "$(uname -m)" == "arm64" ]; then
  #             echo "filename=vtk-macOS-arm64.tar.gz" >> $GITHUB_OUTPUT
  #           else
  #             echo "filename=vtk-macOS-x86_64.tar.gz" >> $GITHUB_OUTPUT
  #           fi
  #         fi
  #       shell: bash

  #     - name: Download pre-built VTK
  #       uses: suisei-cn/actions-download-file@v1.6.0
  #       with:
  #         url: https://github.com/sanguinariojoe/vtk-builds/releases/download/VTK-${{env.VTK_VERSION_MAJOR}}.${{env.VTK_VERSION_MINOR}}.${{env.VTK_VERSION_PATCH}}-static/${{ steps.vtk-file.outputs.filename }}
  #         target: ${{github.workspace}}

  #     - name: Extract VTK
  #       run: |
  #         mkdir -p vtk
  #         tar -xzf ${{ steps.vtk-file.outputs.filename }} -C vtk
  #       shell: bash
  #       working-directory: ${{github.workspace}}

  #     - name: Set CMake path
  #       run: |
  #         if [ "$RUNNER_OS" == "Windows" ]; then
  #           VTK_PATH=$(cygpath -w "${PWD}/vtk/lib/cmake/vtk-${VTK_VERSION_MAJOR}.${VTK_VERSION_MINOR}" | sed 's/\\/\\\\/g')
  #         else
  #           VTK_PATH="${PWD}/vtk/lib/cmake/vtk-${VTK_VERSION_MAJOR}.${VTK_VERSION_MINOR}"
  #         fi
  #         echo "CMAKE_PREFIX_PATH=${VTK_PATH}" >> $GITHUB_ENV
  #       shell: bash
  #       working-directory: ${{github.workspace}}

  #     - name: Build package
  #       run: uv build --no-sources
  #     - name: Store artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dist-${{ matrix.os }}-py${{ matrix.python-version }}
  #         path: dist/*

  # upload:
  #   needs: [build_wheels, build_nonlinux]
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: astral-sh/setup-uv@v4
  #       with:
  #         python-version: "3.12"
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: dist-*
  #         path: dist
  #         merge-multiple: true
  #     - name: Download cibuildwheel artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: cibw-wheels-*
  #         path: dist
  #         merge-multiple: true
  #     - name: List distributions
  #       run: ls -R dist/
  #     - name: Publish to PyPI
  #       if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #       env:
  #         UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}
  #       run: uv publish dist/* --verbose
  #     - name: Rename wheels for TestPyPI
  #       if: github.event_name == 'pull_request'
  #       run: |
  #         COMMIT_HASH=$(git rev-parse --short HEAD)
  #         for wheel in dist/*.whl; do
  #             CURRENT_VERSION=$(echo "$wheel" | sed -E 's/.*-([0-9]+\.[0-9]+\.[0-9]+.*)-.*\.whl/\1/')
  #             NEW_VERSION="${CURRENT_VERSION}.dev+git.${COMMIT_HASH}"
  #             NEW_NAME=$(echo "$wheel" | sed "s/$CURRENT_VERSION/$NEW_VERSION/")
  #             mv "$wheel" "$NEW_NAME"
  #         done
  #     - name: Publish to TestPyPI
  #       if: github.event_name == 'pull_request'
  #       env:
  #         UV_PUBLISH_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
  #       run: uv publish dist/* --publish-url https://test.pypi.org/legacy/ --verbose
