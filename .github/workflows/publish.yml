name: Publish to PyPI
on:
  push:
    tags:
      - "v*"
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build package
        run: uv build --no-sources
      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*

  upload:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4 # Need the code to modify version
      - uses: astral-sh/setup-uv@v4
        with:
          python-version: "3.12"
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          path: dist
          merge-multiple: true
      - name: List distributions
        run: ls -R dist/
      - name: Publish to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: uv publish dist/* --verbose
      - name: Modify version for TestPyPI
        if: github.event_name == 'pull_request'
        run: |
          # Get the short commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(grep -m1 'version = ' pyproject.toml | cut -d'"' -f2)
          # Create new version with commit hash
          NEW_VERSION="${CURRENT_VERSION}.dev+git.${COMMIT_HASH}"
          # Update version in pyproject.toml
          sed -i.bak "s/version = \"${CURRENT_VERSION}\"/version = \"${NEW_VERSION}\"/" pyproject.toml
          # Rebuild packages with new version
          rm -rf dist/*
          uv build --no-sources
      - name: Publish to TestPyPI
        if: github.event_name == 'pull_request'
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
        run: uv publish dist/* --repository https://test.pypi.org/legacy/ --verbose
